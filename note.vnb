{cells:[{kind:2,language:'typescriptreact',value:'const operatorsMap = {\n  equal: "$eq",\n  notEqual: "$ne",\n  lt: "$lt",\n  gt: "$gt",\n  lte: "$lte",\n  gte: "$gte",\n  like: "$like",\n  in: "$in",\n  notIn: "$nin",\n  between: "$between",\n  notBetween: "$notBetween",\n  isNull: "$null",\n};\n\nfunction transformData<T extends ColumnQuery<any>>(conditions: T) {\n  const condition: Record<string, any> = {};\n  const orderBy: Partial<Record<keyof typeof conditions, OrderByType>> = {};\n\n  Object.entries(conditions).forEach(([key, value]) => {\n    if (typeof value === "object" && value !== null) {\n      Object.entries(operatorsMap).forEach(([operator, sqlOperator]) => {\n        if (value.hasOwnProperty(operator)) {\n          condition[key] = condition[key] || {};\n          condition[key][sqlOperator] = value[operator];\n        }\n      });\n\n      if (value.hasOwnProperty("orderBy")) {\n        orderBy[key as keyof typeof conditions] = value.orderBy;\n      }\n    } else {\n      condition[key] = value;\n    }\n  });\n\n  return { condition, orderBy };\n}\n\nVitale.html(`\n  <div>\n    <h1>${JSON.stringify(transformData({ chatIds: ["123", "456"] }), null, 2)}</h1>\n  </div>\n`);\n',metadata:{id:'3ajMe5RhEmanLnU-zZu0t'}}]}